ADO2MPP - MICROSOFT PROJECT IMPORT GUIDE
=========================================
Simplified Native Fields Mapping for Azure DevOps to Microsoft Project Bridge

OVERVIEW:
This tool now exports ONLY native Microsoft Project fields for seamless import.
All Azure DevOps metadata is consolidated into the Notes field for easy reference.

REGIONAL SETTINGS:
- Format: European
- Decimal Separator: .
- List Separator: ;
- Thousands Separator: 

STEP 1: Open Microsoft Project
STEP 2: Go to File → Open
STEP 3: Select the generated Excel file (AzureDevOpsExport_ProjectImport.xlsx)
STEP 4: Choose 'Tasks' worksheet (for Excel) or specify ';' delimiter (for CSV)
STEP 5: In Import Wizard, configure TASK MAPPING:

NATIVE FIELD MAPPINGS (Direct Import - No Custom Fields Required):
===============================================================

CORE TASK FIELDS:
- Excel Column 'Unique ID' → Project Field 'Unique ID'
- Excel Column 'Name' → Project Field 'Name'  
- Excel Column 'Outline Level' → Project Field 'Outline Level'

SCHEDULING FIELDS:
- Excel Column 'Duration' → Project Field 'Duration'
- Excel Column 'Start' → Project Field 'Start' (from ADO StartDate)
- Excel Column 'Finish' → Project Field 'Finish' (from ADO TargetDate/DueDate priority)
- Excel Column 'Predecessors' → Project Field 'Predecessors'
- Excel Column '% Complete' → Project Field '% Complete'

RESOURCE ASSIGNMENT:
- Excel Column 'Resource Names' → Project Field 'Resource Names' (Owner if available, otherwise AssignedTo)

AZURE DEVOPS INTEGRATION:
- Excel Column 'Notes' → Project Field 'Notes' (Contains: ADO ID, Type, State, Direct URL)

FIELD PRIORITY LOGIC:
====================
- Start Date: Uses Microsoft.VSTS.Scheduling.StartDate
- Finish Date: Uses Microsoft.VSTS.Scheduling.TargetDate (revised due date) if present, 
               otherwise Microsoft.VSTS.Scheduling.DueDate (original due date)
- Resource Names: Uses Custom.Owner if available, otherwise System.AssignedTo

NOTES FIELD FORMAT:
==================
The Notes field contains all ADO metadata in this format:
ADO ID: [Work Item ID]
Type: [Epic/Feature/User Story/Task/Bug]
State: [New/Active/Resolved/Closed]
URL: [Direct clickable link to ADO work item]

IMPORT BENEFITS:
===============
✅ No custom field mapping required
✅ Direct import to Microsoft Project without field conflicts
✅ All ADO metadata preserved in Notes field
✅ Clickable URLs to original ADO work items
✅ Proper hierarchical structure maintained
✅ Task dependencies preserved
✅ Resource assignments maintained

POST-IMPORT USAGE:
=================
After import, you can:
1. Click URLs in Notes field to access original ADO work items
2. Use standard Microsoft Project features without custom field issues
3. Export back to Excel maintaining compatibility
4. Generate standard Microsoft Project reports
5. Use Microsoft Project scheduling features normally

TROUBLESHOOTING:
===============
If import fails:
1. Verify Excel file contains 'Tasks' worksheet
2. Ensure all required columns are present
3. Check regional settings match configuration
4. Try CSV format if Excel format fails (automatic fallback provided)
- Excel Column 'Created Date' → Project Field 'Date1' (When work item was created)
- Excel Column 'Changed Date' → Project Field 'Date2' (Last modification date)

NUMBER FORMATTING:
- All numeric fields use '.' as decimal separator
- No thousands separators for clean import
- Predecessor relationships use ';' as delimiter
- This ensures compatibility with your regional settings

CSV FALLBACK (if Excel module unavailable):
- CSV files use ';' as field delimiter
- Compatible with your system's regional settings
- Numbers formatted with '.' decimal separator
- Import: File → Open → Select CSV → Specify ';' as delimiter

ENHANCED EXPORT FEATURES:
- Complete ADO work item metadata included
- Direct links to Azure DevOps work items for easy navigation
- Work estimation and time tracking fields
- Team and iteration assignment information
- Rich metadata for project management and tracking
- Maintains hierarchical relationships (Epic → Feature → User Story → Task)

TROUBLESHOOTING:
- If "Map does not map any fields" error: Ensure Unique ID, Name, and Outline Level are mapped
- If hierarchy is lost: Verify Outline Level field is correctly mapped
- If dates don't import: Check date format in Start/Finish columns
- If resources missing: Verify Resource Names field mapping
- If CSV import issues: Ensure ';' is specified as delimiter
- Select 'Tasks' worksheet when the Import Wizard prompts for worksheet selection
- ADO Links: Use Text3 field in Project to store clickable URLs back to Azure DevOps

BENEFITS OF ENHANCED EXPORT:
1. Bidirectional traceability between Project and Azure DevOps
2. Complete work item context available in Project
3. Easy navigation back to ADO for detailed information
4. Comprehensive project tracking with all metadata
5. Better resource and time management integration

Generated: 16/06/2025 (Enhanced Version)
